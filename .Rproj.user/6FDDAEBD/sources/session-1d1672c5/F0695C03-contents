library(MetaboAnalystR)
library(tidyverse)

analysis_modes = c("HILIC_Positive",
                   "RP_Positive",
                   "RP_Negative")
# AM=analysis_modes[1]
for (AM in analysis_modes) {
mSet<-InitDataObjects(data.type = "pktable", # peak intensity table 
                      anal.type = "stat", # analysis: statistical comparison between groups 
                      paired = FALSE);

mSet<-Read.TextData(mSet, 
                    filePath = paste0("Inputs/CleanUp_LCMSMS_", AM, "_rawHeight.txt"),
                    format = "colu", lbl.type = "disc");

mSet<-SanityCheckData(mSet);

# Replace missing values (run even in the absence of missing values)
mSet<-ReplaceMin(mSet);

mSet<-PreparePrenormData(mSet);

mSet<-Normalization(mSetObj = mSet, "GroupPQN", 
                    transNorm = "LogNorm", 
                    scaleNorm = "AutoNorm", 
                    ref = "QC",
                    ratio=FALSE, ratioNum=20);

# Check normalization plots
mSet<-PlotNormSummary(mSet, 
                      imgName = paste0("plots/Metabolite_wise_Normalization_", AM, "_"),
                      format ="png", dpi=72, width=NA);

mSet<-PlotSampleNormSummary(mSet, 
                            imgName = paste0("plots/Sample_wise_Normalization_", AM, "_"),
                            format = "png", dpi=72, width=NA);

# Perform fold-change analysis on uploaded data, unpaired
#mSet<-FC.Anal(mSet, fc.thresh = 2.0, cmp.type = 0, paired = FALSE)
TableContrast = data.frame(Numerator = c("AC9.1", "AC9.2", "AC9.3", 
                                         "AC9.1", "AC9.2", "AC9.1"),
                           Denominator = c(rep("E30", 3), "AC9.3", 
                                           "AC9.3", "AC9.2"))
# mSet$analSet$fc <- list()
# data <- qs::qread("row_norm.qs")
# fc.thresh=2
# fc.thresh = ifelse(fc.thresh > 1, fc.thresh, 1/fc.thresh)
# max.thresh = fc.thresh
# min.thresh = 1/fc.thresh
# for (i in 1:nrow(TableContrast)) {
#     num=TableContrast$Numerator[i]
#     den=TableContrast$Denominator[i]
#     Contrast <- paste0(num, "_v_", den)
#     m1 <- colMeans(data[which(mSetObj$dataSet$cls == num), ])
#     m2 <- colMeans(data[which(mSetObj$dataSet$cls == den), ])
#     ratio <- m1/m2
#     fc.all <- signif(ratio, 5)
#     ratio[ratio < 0] <- 0
#     fc.log <- signif(log2(ratio), 5)
#     fc.log[is.infinite(fc.log) & fc.log < 0] <- -99
#     fc.log[is.infinite(fc.log) & fc.log > 0] <- 99
#     
#     names(fc.all) <- names(fc.log) <- colnames(data)
#     # mSet$analSet$fc[[Contrast]] <- 
#     # res = list(fc.all = fc.all, fc.log = fc.log)
#     # fc.all <- res$fc.all
#     # fc.log <- res$fc.log
#     inx.up <- fc.all > max.thresh
#     inx.down <- fc.all < min.thresh
#     names(inx.up) <- names(inx.down) <- names(fc.all)
#     imp.inx <- inx.up | inx.down
#     sig.mat <- cbind(fc.all[imp.inx, drop = F], 
#                      fc.log[imp.inx, drop = F])
#     colnames(sig.mat) <- c("Fold Change", "log2(FC)")
#     inx.ord <- order(abs(sig.mat[, 2]), decreasing = T)
#     sig.mat <- sig.mat[inx.ord, , drop = F]
#     fileName <- paste0("Results/fold_change_", AM, "_", Contrast, ".csv")
#     write.csv(sig.mat, file = fileName)
#     mSet$analSet$fc[[Contrast]] <- list(paired = FALSE, raw.thresh = fc.thresh, 
#                                max.thresh = max.thresh, min.thresh = min.thresh,
#                                fc.all = fc.all, fc.log = fc.log, inx.up = inx.up, 
#                                inx.down = inx.down, inx.imp = imp.inx, 
#                                sig.mat = sig.mat)
# 
# }
# Plot fold-change analysis
FoldChanges <- GetFC(mSet, paired = F, tableContrast = TableContrast)
FC_thresh = 2

FCs <- matrix(nrow = length(FoldChanges$AC9.1_v_E30$fc.all),
                   ncol = length(FoldChanges), 
                   dimnames = list(row = names(FoldChanges$AC9.1_v_E30$fc.all),
                                   col = names(FoldChanges))
) %>% as.data.frame %>% mutate(MetID = rownames(FCs_list$AC9.1_v_E30))

for (i in names(FoldChanges)) {
    FCs[[i]] = FoldChanges[[i]]$fc.all[FCs$MetID]
}

FCs_long <- FCs %>%
    pivot_longer(cols = !MetID, 
                 names_to = "ContrastName",
                 values_to = "Ratio") %>%
    mutate(log2FC = log2(Ratio),
           Significant = abs(log2FC) > FC_thresh,
           Regulation = case_when(log2FC > FC_thresh ~ "Up-regulated",
                                  log2FC < -FC_thresh ~ "Down-regulated",
                                  .default = "No"),
           PlotName = gsub("_v_", " vs ", ContrastName)
    )

FCs_long %>%
    ggplot(aes(x = MetID, y = log2FC, color = Regulation, alpha = Regulation)) +
    geom_point(stroke=.5) +
    scale_color_manual(values = c("Up-regulated" = "blue",
                                  "Down-regulated"="red",
                                  "No" = "grey50"),
                       name="Log2FC") +
    scale_alpha_manual(values = c("Up-regulated" = 1,
                                  "Down-regulated"=1,
                                  "No" = .5),
                       name="Log2FC") +
    facet_wrap(~PlotName, nrow = 3, ncol = 2) +
    theme_classic() +
    theme(axis.text.x = element_blank(),
          axis.ticks.x = element_blank())


ggplot(fc_data, aes(x = x, y = y, label = label, text = tooltip)) +
    geom_point(aes( size = abs(y), color =ColorValue, fill=ColorValue) , shape = 21, stroke = 0>
                   
                   scale_color_gradient2(
                       
                   ) +
                   scale_fill_gradient2(
                       low = "blue", mid = "grey", high = "red",
                       midpoint = 0, limits = sig_fc_range,
                       space = "Lab", na.value = "darkgrey", name="Log2FC"
                   ) +
                   scale_size(range = c(1.5, 4), guide = "none") +
                   labs(x = "Identifier", y = "Log2 Fold Change") +
                   theme_bw() +
                   theme(legend.position = "right") +
                   geom_hline(yintercept = 0, linewidth = 1)
               
# Perform ANOVA
mSet <- MetaboAnalystR::ANOVA.Anal(mSet, F, 0.05,"tukey")
MetaboAnalystR::Calculate.ANOVA.posthoc(mSet)
if (mSet$analSet$aov$aov.nm == "One-way ANOVA") {
    mSet$analSet$aov$posthoc.res <- 
        sapply(names(mSet$analSet$aov$aov.res), simplify = F, \(x) {
            TukeyHSD(mSet$analSet$aov$aov.res[[x]])$cls %>%
                as.data.frame()
            })
} else {
    require(dunn.test)
    mSet$analSet$aov$posthoc.res <- 
        sapply(names(mSet$analSet$aov$aov.res), simplify = F, \(x) {
            res = dunn.test(mSet$dataSet$norm[[x]], 
                            g = mSet$dataSet$cls)
            list(res$chi2,
                 data.frame(Z = res$Z, pVal = res$P,
                            padj = res$P.adjusted,
                            Contrast = res$comparisons))
        })
}

# Plot ANOVA
# mSet <- PlotANOVA(mSet, paste0("plots/ANOVA_", AM, "_"), "png", 72, width=NA)
}
