library(Biostrings)
library(tidyverse)
proteins = readAAStringSet("proteins_of_interest.fa", format = "fasta")
names(proteins) =
gsub("^([A-Za-z0-9_\\.]+) TRINITY.+$",
"\\1",
names(proteins))
transcripts = readDNAStringSet("transcripts_of_interest.fa", format = "fasta")
names(transcripts) =
gsub("^([A-Za-z0-9_\\.]+) len=.+$",
"\\1",
names(transcripts))
annotation =
read_delim("proteins_of_interest_annotation.txt",
delim = "\t",
col_names = c("transcript", "protein",
"ORF_type", "strand",
"start", "end")
)
proteins_check =
sapply(1:nrow(annotation), simplify = F, \(x) {
transcript = annotation$transcript[x]
ORF = IRanges(start = annotation$start[x],
end = annotation$end[x])
transcript_seq =
(transcripts[transcript] %>%
extractAt(ORF))[[1]]
if (annotation$strand[x] != "+") {
transcript_seq =
transcript_seq %>% reverseComplement
}
proteins[annotation$protein[x]] %>% as.character ==
(gsub("*", "", transcript_seq %>% translate() %>%
as.character))
})
c("5prime_UTR", "3prime_UTR")[2:1]
Seqs =
sapply(1:nrow(annotation), simplify = F, \(x) {
transcript = annotation$transcript[x]
ranges_transcript = list(
CDS = IRanges(start = annotation$start[x],
end = annotation$end[x]),
UTR1 = IRanges(start = 1,
end = annotation$start[x] - 1),
UTR2 = IRanges(start = annotation$end[x],
end = width(transcripts[transcript]))
)
seqs_transcript <-
sapply(names(ranges_transcript),
simplify = F, \(mySeq) {
seq = (transcripts[transcript] %>%
extractAt(ranges_transcript[[mySeq]]))[[1]]
ifelse(annotation$strand[x] != "+",
seq %>% reverseComplement,
seq
)
})
if (annotation$strand[x] == "+") {
names(seqs_transcript)[2:3] = c("5prime_UTR", "3prime_UTR")
} else {
names(seqs_transcript)[2:3] = c("5prime_UTR", "3prime_UTR")[2:1]
}
})
Seqs
Seqs =
sapply(1:nrow(annotation), simplify = F, \(x) {
transcript = annotation$transcript[x]
ranges_transcript = list(
CDS = IRanges(start = annotation$start[x],
end = annotation$end[x]),
UTR1 = IRanges(start = 1,
end = annotation$start[x] - 1),
UTR2 = IRanges(start = annotation$end[x],
end = width(transcripts[transcript]))
)
seqs_transcript <-
sapply(names(ranges_transcript),
simplify = F, \(mySeq) {
seq = (transcripts[transcript] %>%
extractAt(ranges_transcript[[mySeq]]))[[1]]
ifelse(annotation$strand[x] != "+",
seq %>% reverseComplement,
seq
)
})
if (annotation$strand[x] == "+") {
names(seqs_transcript)[2:3] = c("5prime_UTR", "3prime_UTR")
} else {
names(seqs_transcript)[2:3] = c("5prime_UTR", "3prime_UTR")[2:1]
}
seqs_transcript
})
Seqs
transcripts[7] %>% width
colNames_final <- c("GeneID", "TranscriptID", "ProteinID", "Strand",
"Protein_coordinates", "CDS_type", "CDS",
"5prime_UTR", "3prime_UTR")
output_table <- as.data.frame(matrix(nrow = 0, ncol = length(colNames_final)))
for (i in Seqs) {}
i
names(Seqs) <- annotation$protein
for (i in Seqs) {}
i
colNames_final <- c("TranscriptID", "ProteinID", "Strand",
"Protein_coordinates", "CDS_type", "CDS",
"5prime_UTR", "3prime_UTR")
output_table <- as.data.frame(matrix(nrow = 0, ncol = length(colNames_final)))
for (i in names(Seqs)) {
data.frame("TranscriptID" = annotation$transcript[annotation$protein == i],
"ProteinID" = i,
"Strand" = annotation$strand[annotation$protein == i],
"CDS_start" = annotation$start[annotation$protein == i],
"CDS_end" = annotation$end[annotation$protein == i],
"CDS_type" = annotation$ORF_type[annotation$protein == i],
"CDS" = Seqs[[i]]$CDS) %>%
mutate("5prime_UTR" = ifelse(CDS_type %in% c("3prime_partial", "internal"),
"", Seqs[[i]]$[["5prime_UTR"]]),
for (i in names(Seqs)) {
data.frame("TranscriptID" = annotation$transcript[annotation$protein == i],
"ProteinID" = i,
"Strand" = annotation$strand[annotation$protein == i],
"CDS_start" = annotation$start[annotation$protein == i],
"CDS_end" = annotation$end[annotation$protein == i],
"CDS_type" = annotation$ORF_type[annotation$protein == i],
"CDS" = Seqs[[i]]$CDS) %>%
mutate("5prime_UTR" = ifelse(CDS_type %in% c("3prime_partial", "internal"),
"", Seqs[[i]][["5prime_UTR"]]),
"3prime_UTR" = ifelse(CDS_type %in% c("5prime_partial", "internal"),
"", Seqs[[i]][["3prime_UTR"]]))
}
colNames_final <- c("TranscriptID", "ProteinID", "Strand",
"CDS_start", "CDS_end", "CDS_type", "CDS",
"5prime_UTR", "3prime_UTR")
output_table <- as.data.frame(matrix(nrow = 0, ncol = length(colNames_final)))
for (i in names(Seqs)) {
data.frame("TranscriptID" = annotation$transcript[annotation$protein == i],
"ProteinID" = i,
"Strand" = annotation$strand[annotation$protein == i],
"CDS_start" = annotation$start[annotation$protein == i],
"CDS_end" = annotation$end[annotation$protein == i],
"CDS_type" = annotation$ORF_type[annotation$protein == i],
"CDS" = Seqs[[i]]$CDS) %>%
mutate("5prime_UTR" = ifelse(CDS_type %in% c("3prime_partial", "internal"),
"", Seqs[[i]][["5prime_UTR"]]),
"3prime_UTR" = ifelse(CDS_type %in% c("5prime_partial", "internal"),
"", Seqs[[i]][["3prime_UTR"]]))
}
View(output_table)
annotation$transcript[annotation$protein == i]
sapply(names(Seqs), simplify = F, \(i) {
data.frame("TranscriptID" = annotation$transcript[annotation$protein == i],
"ProteinID" = i,
"Strand" = annotation$strand[annotation$protein == i],
"CDS_start" = annotation$start[annotation$protein == i],
"CDS_end" = annotation$end[annotation$protein == i],
"CDS_type" = annotation$ORF_type[annotation$protein == i],
"CDS" = Seqs[[i]]$CDS) %>%
mutate("5prime_UTR" = ifelse(CDS_type %in% c("3prime_partial", "internal"),
"", Seqs[[i]][["5prime_UTR"]]),
"3prime_UTR" = ifelse(CDS_type %in% c("5prime_partial", "internal"),
"", Seqs[[i]][["3prime_UTR"]]))
}) %>% list_rbind()
output_table <-
sapply(names(Seqs), simplify = F, \(i) {
data.frame("TranscriptID" = annotation$transcript[annotation$protein == i],
"ProteinID" = i,
"Strand" = annotation$strand[annotation$protein == i],
"CDS_start" = annotation$start[annotation$protein == i],
"CDS_end" = annotation$end[annotation$protein == i],
"CDS_type" = annotation$ORF_type[annotation$protein == i],
"CDS" = Seqs[[i]]$CDS) %>%
mutate("5prime_UTR" = ifelse(CDS_type %in% c("3prime_partial", "internal"),
"", Seqs[[i]][["5prime_UTR"]]),
"3prime_UTR" = ifelse(CDS_type %in% c("5prime_partial", "internal"),
"", Seqs[[i]][["3prime_UTR"]]))
}) %>% list_rbind()
View(output_table)
table1 = matrix(data = 1:81, nrow = 9, ncol = 9)
table2 = matrix(data = 1:100, nrow = 10, ncol = 10)
library(tidyverse)
table1 = matrix(data = 1:81, nrow = 9, ncol = 9)
table2 = matrix(data = 1:100, nrow = 10, ncol = 10)
library(tidyverse)
table1 = matrix(data = 1:81, nrow = 9, ncol = 9) %>%
as.data.frame()
table2 = matrix(data = 1:100, nrow = 10, ncol = 10) %>%
as.data.frame()
View(table1)
names(table1)
names(table2)
c(names(table1), names(table1))
c(names(table1), names(table2))
c(names(table1), names(table2)) %>% unique
View(table1)
table1 = matrix(data = 1:81, nrow = 9, ncol = 9) %>%
as.data.frame() %>% mutate(ids = letters[1:10])
table1 = matrix(data = 1:81, nrow = 9, ncol = 9) %>%
as.data.frame() %>% mutate(ids = letters[1:9])
View(table1)
long_format1 = pivot_longer(table1,
cols = !ids,
names_to = "Sequence",
values_to = "Counts")
long_format2 = pivot_longer(table2,
cols = !ids,
names_to = "Sequence",
values_to = "Counts")
table2 = matrix(data = 1:100, nrow = 10, ncol = 10) %>%
as.data.frame() %>% mutate(ids = letters[1:10])
long_format1 = pivot_longer(table1,
cols = !ids,
names_to = "Sequence",
values_to = "Counts")
long_format2 = pivot_longer(table2,
cols = !ids,
names_to = "Sequence",
values_to = "Counts")
View(long_format2)
full_format =
as.data.frame(rbind(long_format1, long_format2))
View(full_format)
full_format =
as.data.frame(rbind(long_format1, long_format2)) %>%
group_by(ids, Sequence) %>%
summarise(newCounts =  sum(Counts))
View(full_format)
wide_full_table = pivot_wider(full_format,
id_cols = ids,
names_from = Sequence,
values_from = newCounts)
View(wide_full_table)
setwd("E:/Nico_metabolomics_2024")
library(tidyverse)
input = read_delim("Inputs/LCMSMS_RP_Negative_rawHeight.txt")
View(input)
metadata = data.frame(Replicates = names(input),
Groups = input[2,]
)
View(metadata)
