greater_than_blank[, colsInterest] %>% rowSums
})
x = "E30"
( metadata %>%
filter(Groups == x))$Replicates
colsInterest = ( metadata %>%
filter(Groups == x))$Replicates
greater_than_blank[, colsInterest]
greater_than_blank[, colsInterest] %>% rowSums
numberRepsPresent =
sapply(measures[, !metadata$Groups %in% c("BLANK", "QC")]$Groups,
simplify = F, \(x) {
colsInterest = ( metadata %>%
filter(Groups == x))$Replicates
greater_than_blank[, colsInterest] %>% rowSums
})
numberRepsPresent =
sapply(measures[, !metadata$Groups %in% c("BLANK", "QC")]$Groups,
simplify = F, \(x) {
colsInterest = ( metadata %>%
filter(Groups == x))$Replicates
greater_than_blank[, colsInterest] %>% rowSums
}) %>% list_rbind
sapply(measures[, !metadata$Groups %in% c("BLANK", "QC")]$Groups,
simplify = F, \(x) {
colsInterest = (metadata %>%
filter(Groups == x))$Replicates
greater_than_blank[, colsInterest] %>% rowSums
})
colsInterest = (metadata %>%
filter(Groups == x))$Replicates
greater_than_blank[, colsInterest] %>% rowSums
numberRepsPresent =
sapply(measures[, !metadata$Groups %in% c("BLANK", "QC")]$Groups,
simplify = F, \(x) {
colsInterest = (metadata %>%
filter(Groups == x))$Replicates
greater_than_blank[, colsInterest] %>% rowSums %>%
as.data.frame
}) %>% list_rbind
numberRepsPresent =
sapply(measures[, !metadata$Groups %in% c("BLANK", "QC")]$Groups,
simplify = F, \(x) {
colsInterest = (metadata %>%
filter(Groups == x))$Replicates
greater_than_blank[, colsInterest] %>% rowSums %>%
as.data.frame
})
numberRepsPresent =
sapply(measures[, !metadata$Groups %in% c("BLANK", "QC")]$Groups,
simplify = F, \(x) {
colsInterest = (metadata %>%
filter(Groups == x))$Replicates
greater_than_blank[, colsInterest]
})
numberRepsPresent =
sapply(measures[, !metadata$Groups %in% c("BLANK", "QC")]$Groups %>% unique,
simplify = F, \(x) {
colsInterest = (metadata %>%
filter(Groups == x))$Replicates
greater_than_blank[, colsInterest]
})
clones = measures[, !metadata$Groups %in% c("BLANK", "QC")]$Groups %>% unique
measures[, !metadata$Groups %in% c("BLANK", "QC")]
clones = metadata[, !metadata$Groups %in% c("BLANK", "QC")]$Groups %>% unique
clones = metadata[!metadata$Groups %in% c("BLANK", "QC"),]$Groups %>% unique
numberRepsPresent =
sapply(clones,
simplify = F, \(x) {
colsInterest = (metadata %>%
filter(Groups == x))$Replicates
greater_than_blank[, colsInterest]
})
numberRepsPresent =
sapply(clones,
simplify = F, \(x) {
colsInterest = (metadata %>%
filter(Groups == x))$Replicates
greater_than_blank[, colsInterest] %>% rowsum()
})
numberRepsPresent =
sapply(clones,
simplify = F, \(x) {
colsInterest = (metadata %>%
filter(Groups == x))$Replicates
greater_than_blank[, colsInterest] %>% rowSums()
})
numberRepsPresent =
sapply(clones,
simplify = F, \(x) {
colsInterest = (metadata %>%
filter(Groups == x))$Replicates
greater_than_blank[, colsInterest] %>% rowSums()
}) %>% list_cbind()
numberRepsPresent =
sapply(clones,
simplify = F, \(x) {
colsInterest = (metadata %>%
filter(Groups == x))$Replicates
greater_than_blank[, colsInterest] %>% rowSums() %>%
as.data.frame
}) %>% list_cbind()
View(numberRepsPresent)
numberRepsPresent =
sapply(clones,
simplify = F, \(x) {
colsInterest = (metadata %>%
filter(Groups == x))$Replicates
greater_than_blank[, colsInterest] %>% rowSums()
})
numberRepsPresent =
sapply(clones, \(x) {
colsInterest = (metadata %>%
filter(Groups == x))$Replicates
greater_than_blank[, colsInterest] %>% rowSums()
})
numberRepsPresent =
sapply(clones, \(x) {
colsInterest = (metadata %>%
filter(Groups == x))$Replicates
greater_than_blank[, colsInterest] %>% rowSums()
}) %>% as.data.frame
View(numberRepsPresent)
View(numberRepsPresent)
remove_mets = apply(numberRepsPresent, 1, \(x) all(x == 0))
remove_mets = which(apply(numberRepsPresent, 1, \(x) all(x == 0)))
numberRepsPresent =
sapply(clones, \(x) {
colsInterest = (metadata %>%
filter(Groups == x))$Replicates
samples_GTB = greater_than_blank[, colsInterest] %>% rowSums()
samples_GTB > 1
}) %>% as.data.frame
remove_mets = which(apply(numberRepsPresent, 1, \(x) all(x == 0)))
measures_greater_than_blank = measures_IDs %>%
filter(!ID %in% remove_mets)
View(measures_greater_than_blank)
measures_greater_than_blank = measures_IDs %>%
filter(!ID %in% remove_mets) %>%
select(all_of(metadata$Replicates[metadata$Groups %in% clones]))
View(measures_greater_than_blank)
measures_greater_than_blank = measures_IDs %>%
filter(!ID %in% remove_mets) %>%
select(all_of(metadata$Replicates[metadata$Groups %in% clones]))
remove_mets = which(apply(numberRepsPresent, 1, \(x) all(x == 0)))
names(remove_mets)
remove_mets = which(apply(numberRepsPresent, 1, \(x) all(x == 0))) %>%
names
measures_greater_than_blank = measures_IDs %>%
filter(!ID %in% remove_mets) %>%
select(all_of(metadata$Replicates[metadata$Groups %in% clones]))
View(measures_greater_than_blank)
measures_greater_than_blank = input %>%
filter(!Sample %in% remove_mets) %>%
select(Sample,
all_of(metadata$Replicates[metadata$Groups %in% clones]))
View(measures_greater_than_blank)
files = list_files(path = "Inputs",
pattern = "LCMSMS",
full.names = T)
files = list.files(path = "Inputs",
pattern = "LCMSMS",
full.names = T)
out_files = sapply(in_files, \(x) {
paste0("Inputs/CleanUp_", basename(x))
})
in_files = list.files(path = "Inputs",
pattern = "^LCMSMS",
full.names = T)
out_files = sapply(in_files, \(x) {
paste0("Inputs/CleanUp_", basename(x))
})
sapply(1:3, \(fileNumber) {
input = read_delim(in_files[fileNumber]) %>%
as.data.frame()
metadata = data.frame(Replicates = names(input)[-1],
Groups = input[1,-1] %>% as.character
)
measures = apply(input[-1,-1], 2, \(x) {
as.numeric(x) + 1
}) %>%
as.data.frame
rownames(measures) = input[-1,1]
measures_IDs = measures %>%
mutate(ID = rownames(.))
blank_value = apply(measures[, metadata$Groups == "BLANK"],
1, max)
greater_than_blank =
apply(measures[, !metadata$Groups %in% c("BLANK", "QC")],
2, \(x) {
x > blank_value*blank_threshold
}) %>% data.frame(row.names = rownames(measures))
clones = metadata[!metadata$Groups %in% c("BLANK", "QC"),]$Groups %>% unique
numberRepsPresent =
sapply(clones, \(x) {
colsInterest = (metadata %>%
filter(Groups == x))$Replicates
samples_GTB = greater_than_blank[, colsInterest] %>% rowSums()
samples_GTB > 1
}) %>% as.data.frame
remove_mets = which(apply(numberRepsPresent, 1, \(x) all(x == 0))) %>%
names
measures_greater_than_blank = input %>%
filter(!Sample %in% remove_mets) %>%
select(Sample,
all_of(metadata$Replicates[metadata$Groups %in% clones]))
write_delim(measures_greater_than_blank,
file = out_files, delim = "\t", append = F)
})
for (fileNumber in 1:3) {
input = read_delim(in_files[fileNumber]) %>%
as.data.frame()
metadata = data.frame(Replicates = names(input)[-1],
Groups = input[1,-1] %>% as.character
)
measures = apply(input[-1,-1], 2, \(x) {
as.numeric(x) + 1
}) %>%
as.data.frame
rownames(measures) = input[-1,1]
measures_IDs = measures %>%
mutate(ID = rownames(.))
blank_value = apply(measures[, metadata$Groups == "BLANK"],
1, max)
greater_than_blank =
apply(measures[, !metadata$Groups %in% c("BLANK", "QC")],
2, \(x) {
x > blank_value*blank_threshold
}) %>% data.frame(row.names = rownames(measures))
clones = metadata[!metadata$Groups %in% c("BLANK", "QC"),]$Groups %>% unique
numberRepsPresent =
sapply(clones, \(x) {
colsInterest = (metadata %>%
filter(Groups == x))$Replicates
samples_GTB = greater_than_blank[, colsInterest] %>% rowSums()
samples_GTB > 1
}) %>% as.data.frame
remove_mets = which(apply(numberRepsPresent, 1, \(x) all(x == 0))) %>%
names
measures_greater_than_blank = input %>%
filter(!Sample %in% remove_mets) %>%
select(Sample,
all_of(metadata$Replicates[metadata$Groups %in% clones]))
write_delim(measures_greater_than_blank,
file = out_files, delim = "\t", append = F)
}
library(tidyverse)
source("scripts/get_positive_ids.R")
blank_threshold = 5
in_files = list.files(path = "Inputs",
pattern = "^LCMSMS",
full.names = T)
out_files = sapply(in_files, \(x) {
paste0("Inputs/CleanUp_", basename(x))
})
for (fileNumber in 1:3) {
input = read_delim(in_files[fileNumber]) %>%
as.data.frame()
metadata = data.frame(Replicates = names(input)[-1],
Groups = input[1,-1] %>% as.character
)
measures = apply(input[-1,-1], 2, \(x) {
as.numeric(x) + 1
}) %>%
as.data.frame
rownames(measures) = input[-1,1]
measures_IDs = measures %>%
mutate(ID = rownames(.))
blank_value = apply(measures[, metadata$Groups == "BLANK"],
1, max)
greater_than_blank =
apply(measures[, !metadata$Groups %in% c("BLANK", "QC")],
2, \(x) {
x > blank_value*blank_threshold
}) %>% data.frame(row.names = rownames(measures))
clones = metadata[!metadata$Groups %in% c("BLANK", "QC"),]$Groups %>% unique
numberRepsPresent =
sapply(clones, \(x) {
colsInterest = (metadata %>%
filter(Groups == x))$Replicates
samples_GTB = greater_than_blank[, colsInterest] %>% rowSums()
samples_GTB > 1
}) %>% as.data.frame
remove_mets = which(apply(numberRepsPresent, 1, \(x) all(x == 0))) %>%
names
measures_greater_than_blank = input %>%
filter(!Sample %in% remove_mets) %>%
select(Sample,
all_of(metadata$Replicates[metadata$Groups %in% clones]))
write_delim(measures_greater_than_blank,
file = out_files, delim = "\t", append = F)
}
read_delim(in_files[fileNumber]) %>%
as.data.frame()
View(input)
switch(menu(c("List letters", "List LETTERS")) + 1,
cat("Nothing done\n"), letters, LETTERS)
a = menu(c(1, 2), title = "test")
a
for (fileNumber in 1:3) {
input = read_delim(in_files[fileNumber]) %>%
as.data.frame()
print(head(n=2, input))
if (menu(choices("Continue", "Stop"), title = "Do you want to continue?") == 2) {
next
}
metadata = data.frame(Replicates = names(input)[-1],
Groups = input[1,-1] %>% as.character
)
measures = apply(input[-1,-1], 2, \(x) {
as.numeric(x) + 1
}) %>%
as.data.frame
rownames(measures) = input[-1,1]
measures_IDs = measures %>%
mutate(ID = rownames(.))
blank_value = apply(measures[, metadata$Groups == "BLANK"],
1, max)
greater_than_blank =
apply(measures[, !metadata$Groups %in% c("BLANK", "QC")],
2, \(x) {
x > blank_value*blank_threshold
}) %>% data.frame(row.names = rownames(measures))
clones = metadata[!metadata$Groups %in% c("BLANK", "QC"),]$Groups %>% unique
numberRepsPresent =
sapply(clones, \(x) {
colsInterest = (metadata %>%
filter(Groups == x))$Replicates
samples_GTB = greater_than_blank[, colsInterest] %>% rowSums()
samples_GTB > 1
}) %>% as.data.frame
remove_mets = which(apply(numberRepsPresent, 1, \(x) all(x == 0))) %>%
names
measures_greater_than_blank = input %>%
filter(!Sample %in% remove_mets) %>%
select(Sample,
all_of(metadata$Replicates[metadata$Groups %in% clones]))
write_delim(measures_greater_than_blank,
file = out_files, delim = "\t", append = F)
}
for (fileNumber in 1:3) {
input = read_delim(in_files[fileNumber]) %>%
as.data.frame()
print(head(n=2, input))
if (menu(choices= c("Continue", "Stop"),
title = "Do you want to continue?") == 2) {
next
}
metadata = data.frame(Replicates = names(input)[-1],
Groups = input[1,-1] %>% as.character
)
measures = apply(input[-1,-1], 2, \(x) {
as.numeric(x) + 1
}) %>%
as.data.frame
rownames(measures) = input[-1,1]
measures_IDs = measures %>%
mutate(ID = rownames(.))
blank_value = apply(measures[, metadata$Groups == "BLANK"],
1, max)
greater_than_blank =
apply(measures[, !metadata$Groups %in% c("BLANK", "QC")],
2, \(x) {
x > blank_value*blank_threshold
}) %>% data.frame(row.names = rownames(measures))
clones = metadata[!metadata$Groups %in% c("BLANK", "QC"),]$Groups %>% unique
numberRepsPresent =
sapply(clones, \(x) {
colsInterest = (metadata %>%
filter(Groups == x))$Replicates
samples_GTB = greater_than_blank[, colsInterest] %>% rowSums()
samples_GTB > 1
}) %>% as.data.frame
remove_mets = which(apply(numberRepsPresent, 1, \(x) all(x == 0))) %>%
names
measures_greater_than_blank = input %>%
filter(!Sample %in% remove_mets) %>%
select(Sample,
all_of(metadata$Replicates[metadata$Groups %in% clones]))
write_delim(measures_greater_than_blank,
file = out_files, delim = "\t", append = F)
}
fileNumber=2
input = read_delim(in_files[fileNumber]) %>%
as.data.frame()
print(head(n=2, input))
fileNumber=1
input = read_delim(in_files[fileNumber]) %>%
as.data.frame()
print(head(n=2, input))
library(tidyverse)
source("scripts/get_positive_ids.R")
blank_threshold = 5
in_files = list.files(path = "Inputs",
pattern = "^LCMSMS",
full.names = T)
out_files = sapply(in_files, \(x) {
paste0("Inputs/CleanUp_", basename(x))
})
for (fileNumber in 2:3) {
input = read_delim(in_files[fileNumber]) %>%
as.data.frame()
print(head(n=2, input))
metadata = data.frame(Replicates = names(input)[-1],
Groups = input[1,-1] %>% as.character
)
measures = apply(input[-1,-1], 2, \(x) {
as.numeric(x) + 1
}) %>%
as.data.frame
rownames(measures) = input[-1,1]
measures_IDs = measures %>%
mutate(ID = rownames(.))
blank_value = apply(measures[, metadata$Groups == "BLANK"],
1, max)
greater_than_blank =
apply(measures[, !metadata$Groups %in% c("BLANK", "QC")],
2, \(x) {
x > blank_value*blank_threshold
}) %>% data.frame(row.names = rownames(measures))
clones = metadata[!metadata$Groups %in% c("BLANK", "QC"),]$Groups %>% unique
numberRepsPresent =
sapply(clones, \(x) {
colsInterest = (metadata %>%
filter(Groups == x))$Replicates
samples_GTB = greater_than_blank[, colsInterest] %>% rowSums()
samples_GTB > 1
}) %>% as.data.frame
remove_mets = which(apply(numberRepsPresent, 1, \(x) all(x == 0))) %>%
names
measures_greater_than_blank = input %>%
filter(!Sample %in% remove_mets) %>%
select(Sample,
all_of(metadata$Replicates[metadata$Groups %in% clones]))
write_delim(measures_greater_than_blank,
file = out_files, delim = "\t", append = F)
}
traceback()
for (fileNumber in 2:3) {
input = read_delim(in_files[fileNumber]) %>%
as.data.frame()
print(head(n=2, input))
metadata = data.frame(Replicates = names(input)[-1],
Groups = input[1,-1] %>% as.character
)
measures = apply(input[-1,-1], 2, \(x) {
as.numeric(x) + 1
}) %>%
as.data.frame
rownames(measures) = input[-1,1]
measures_IDs = measures %>%
mutate(ID = rownames(.))
blank_value = apply(measures[, metadata$Groups == "BLANK"],
1, max)
greater_than_blank =
apply(measures[, !metadata$Groups %in% c("BLANK", "QC")],
2, \(x) {
x > blank_value*blank_threshold
}) %>% data.frame(row.names = rownames(measures))
clones = metadata[!metadata$Groups %in% c("BLANK", "QC"),]$Groups %>% unique
numberRepsPresent =
sapply(clones, \(x) {
colsInterest = (metadata %>%
filter(Groups == x))$Replicates
samples_GTB = greater_than_blank[, colsInterest] %>% rowSums()
samples_GTB > 1
}) %>% as.data.frame
remove_mets = which(apply(numberRepsPresent, 1, \(x) all(x == 0))) %>%
names
measures_greater_than_blank = input %>%
filter(!Sample %in% remove_mets) %>%
select(Sample,
all_of(metadata$Replicates[metadata$Groups %in% clones]))
write_delim(measures_greater_than_blank,
file = out_files[fileNumber], delim = "\t", append = F)
}
View(numberRepsPresent)
kept_mets = numberRepsPresent %>%
filter(!rownames(.) %in% remove_mets)
View(kept_mets)
measures_greater_than_blank = input %>%
select(Sample,
all_of(metadata$Replicates[metadata$Groups %in% clones])) %>%
sapply(names(.), simplify = F, \(colName) {
if (colName == "Sample") {
measures_greater_than_blank[[colName]]
}
cloneName = metadata$Groups[metadata$Replicates == colName]
trueIntensity = sapply(rownames(numberRepsPresent), \(met) {
ifelse(
numberRepsPresent[met, cloneName],
measures_greater_than_blank[met, colName],
0)
})
c(measures_greater_than_blank[1, colName],
trueIntensity)
})
sapply(names(measures_greater_than_blank),
simplify = F, \(colName) {
if (colName == "Sample") {
measures_greater_than_blank[[colName]]
}
cloneName = metadata$Groups[metadata$Replicates == colName]
trueIntensity = sapply(rownames(numberRepsPresent), \(met) {
ifelse(
numberRepsPresent[met, cloneName],
measures_greater_than_blank[met, colName],
0)
})
c(measures_greater_than_blank[1, colName],
trueIntensity)
}) %>% list_cbind()
