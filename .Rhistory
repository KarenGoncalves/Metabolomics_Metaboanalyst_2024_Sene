nUp = filter(fc_data, fc.log > fc.thresh & Significance == "Significant") %>% nrow
nDown = filter(fc_data, fc.log < -fc.thresh & Significance == "Significant") %>% nrow
p <- ggplot(fc_data, aes(x = x, y = y, label = label, text = tooltip)) +
geom_point(aes(size = abs(y), color = ColorValue, fill = ColorValue),
shape = 21, stroke = 0.5) +
scale_color_gradient2(low = "blue",
mid = "grey", high = "red", midpoint = 0, limits = sig_fc_range,
space = "Lab", na.value = "darkgrey", guide = "colourbar",
name = "Log2FC") +
scale_fill_gradient2(low = "blue",
mid = "grey", high = "red", midpoint = 0, limits = sig_fc_range,
space = "Lab", na.value = "darkgrey", name = "Log2FC") +
scale_size(range = c(1.5, 4), guide = "none") +
labs(x = "Identifier",
y = "Log2 Fold Change",
caption = paste0("Metabolites deregulated in ",
gsub("_v_", " vs ", ContrastName),
": Up=", nUp, "; Down=", nDown)) +
theme_bw() + theme(legend.position = "right") +
geom_hline(yintercept = 0, linewidth = 1)
Cairo::Cairo(file = imgName, unit = "in", dpi = dpi,
width = w, height = h, type = format, bg = "white")
print(p)
dev.off()
return(mSetObj)
}
# ANOVA
aof <- function (x, cls) {
aov(x ~ cls)
}
.get.ftest.res <- function (data, cls, nonpar) {
print("Performing regular ANOVA F-tests ....")
aov.res <- my.res <- posthoc.res <- NULL
if (!nonpar) {
aov.res <- apply(data, 2, aof, cls)
anova.res <- lapply(aov.res, anova)
my.res <- unlist(lapply(anova.res, function(x) {
c(x["F value"][1, ], x["Pr(>F)"][1, ])
}))
posthoc.res <- sapply(names(aov.res), simplify = F, \(x){
TukeyHSD(aov.res[[x]])
})
}
else {
require(dunn.test)
anova.res <- apply(data, 2, kwtest, cls)
my.res <- unlist(lapply(anova.res, function(x) {
c(x$statistic, x$p.value)
}))
posthoc.res <- sapply(names(data), simplify = F, \(x) {
dunn.test(data[[x]], g = cls)
})
}
my.res <- list(aov.res = aov.res,
f.res = data.frame(matrix(my.res,
nrow = ncol(data), byrow = T),
stringsAsFactors = FALSE),
posthoc.res)
return(my.res)
}
GetFtestRes <- function(mSetObj=NA, nonpar=F){
if(!exists("mem.aov")){
require("memoise");
mem.aov <<- memoise(.get.ftest.res);
}
mSetObj <- .get.mSet(mSetObj);
data <- as.matrix(mSetObj$dataSet$norm);
cls <- mSetObj$dataSet$cls;
print("using cache .......");
return(mem.aov(data, cls, nonpar));
}
ANOVA.Anal <- function (mSetObj = NA, nonpar = FALSE, thresh = 0.05, all_results = FALSE)
{
if (!nonpar) {
aov.nm <- "One-way ANOVA"
}
else {
aov.nm <- "Kruskal Wallis Test"
}
sig.num <- 0
aov.res <- sig.mat <- NULL
data <- as.matrix(mSetObj$dataSet$norm)
cls <- mSetObj$dataSet$cls
my.res <- GetFtestRes(mSetObj, nonpar)
aov.res <- my.res$aov.res
res <- my.res$f.res
fstat <- res[, 1]
p.value <- res[, 2]
names(fstat) <- names(p.value) <- colnames(data)
fdr.p <- p.adjust(p.value, "fdr")
all.mat <- data.frame(signif(fstat, 5), signif(p.value,
5), signif(-log10(p.value), 5), signif(fdr.p, 5))
rownames(all.mat) <- names(p.value)
colnames(all.mat) <- c("F.stat", "p.value", "-log10(p)",
"FDR")
ord.inx <- order(p.value)
ord.mat <- all.mat[ord.inx, ]
fast.write.csv(ord.mat, "anova_all_results.csv")
inx.imp <- fdr.p <= thresh
sig.num <- sum(inx.imp, na.rm = TRUE)
AddMsg(paste(c("A total of", sig.num, "significant features were found."),
collapse = " "))
res <- 0
sig.f <- sig.p <- sig.fdr <- 1
if (sig.num > 0) {
res <- 1
sig.f <- fstat[inx.imp]
sig.p <- p.value[inx.imp]
sig.fdr <- fdr.p[inx.imp]
if (exists("aov.res")) {
qs::qsave(aov.res[inx.imp], file = "aov_res_imp.qs")
}
sig.mat <- all.mat[inx.imp, ]
ord.inx <- order(sig.mat$p.value)
sig.mat <- sig.mat[ord.inx, ]
}
else {
sig.mat <- ord.mat[1:10, ]
}
aov <- list(aov.nm = aov.nm, nonpar = nonpar, sig.num = sig.num,
raw.thresh = thresh, thresh = -log10(thresh), p.value = p.value,
p.log = -log10(p.value), fdr.p = fdr.p, inx.imp = inx.imp,
sig.f = sig.f, sig.p = sig.p, sig.fdr = sig.fdr, sig.mat = sig.mat,
posthoc.res = my.res$posthoc.res)
mSetObj$analSet$aov <- aov
return(mSetObj)
}
# Perform ANOVA
mSet <- ANOVA.Anal(mSet, F, 0.05, "fisher")
aof <- function (x, cls) {
aov(x ~ cls)
}
.get.ftest.res <- function (data, cls, nonpar) {
print("Performing regular ANOVA F-tests ....")
aov.res <- my.res <- posthoc.res <- NULL
if (!nonpar) {
aov.res <- apply(data, 2, aof, cls)
anova.res <- lapply(aov.res, anova)
my.res <- unlist(lapply(anova.res, function(x) {
c(x["F value"][1, ], x["Pr(>F)"][1, ])
}))
posthoc.res <- sapply(names(aov.res), simplify = F, \(x){
TukeyHSD(aov.res[[x]])
})
}
else {
require(dunn.test)
anova.res <- apply(data, 2, kwtest, cls)
my.res <- unlist(lapply(anova.res, function(x) {
c(x$statistic, x$p.value)
}))
posthoc.res <- sapply(names(data), simplify = F, \(x) {
dunn.test(data[[x]], g = cls)
})
}
my.res <- list(aov.res = aov.res,
f.res = data.frame(matrix(my.res,
nrow = ncol(data), byrow = T),
stringsAsFactors = FALSE),
posthoc.res)
return(my.res)
}
GetFtestRes <- function(mSetObj=NA, nonpar=F){
if(!exists("mem.aov")){
require("memoise");
mem.aov <<- memoise(.get.ftest.res);
}
mSetObj <- .get.mSet(mSetObj);
data <- as.matrix(mSetObj$dataSet$norm);
cls <- mSetObj$dataSet$cls;
print("using cache .......");
return(mem.aov(data, cls, nonpar));
}
ANOVA.Anal <- function (mSetObj = NA, nonpar = FALSE, thresh = 0.05, all_results = FALSE)
{
if (!nonpar) {
aov.nm <- "One-way ANOVA"
}
else {
aov.nm <- "Kruskal Wallis Test"
}
sig.num <- 0
aov.res <- sig.mat <- NULL
data <- as.matrix(mSetObj$dataSet$norm)
cls <- mSetObj$dataSet$cls
my.res <- GetFtestRes(mSetObj, nonpar)
aov.res <- my.res$aov.res
res <- my.res$f.res
fstat <- res[, 1]
p.value <- res[, 2]
names(fstat) <- names(p.value) <- colnames(data)
fdr.p <- p.adjust(p.value, "fdr")
all.mat <- data.frame(signif(fstat, 5), signif(p.value,
5), signif(-log10(p.value), 5), signif(fdr.p, 5))
rownames(all.mat) <- names(p.value)
colnames(all.mat) <- c("F.stat", "p.value", "-log10(p)",
"FDR")
ord.inx <- order(p.value)
ord.mat <- all.mat[ord.inx, ]
fast.write.csv(ord.mat, "anova_all_results.csv")
inx.imp <- fdr.p <= thresh
sig.num <- sum(inx.imp, na.rm = TRUE)
AddMsg(paste(c("A total of", sig.num, "significant features were found."),
collapse = " "))
res <- 0
sig.f <- sig.p <- sig.fdr <- 1
if (sig.num > 0) {
res <- 1
sig.f <- fstat[inx.imp]
sig.p <- p.value[inx.imp]
sig.fdr <- fdr.p[inx.imp]
if (exists("aov.res")) {
qs::qsave(aov.res[inx.imp], file = "aov_res_imp.qs")
}
sig.mat <- all.mat[inx.imp, ]
ord.inx <- order(sig.mat$p.value)
sig.mat <- sig.mat[ord.inx, ]
}
else {
sig.mat <- ord.mat[1:10, ]
}
aov <- list(aov.nm = aov.nm, nonpar = nonpar, sig.num = sig.num,
raw.thresh = thresh, thresh = -log10(thresh), p.value = p.value,
p.log = -log10(p.value), fdr.p = fdr.p, inx.imp = inx.imp,
sig.f = sig.f, sig.p = sig.p, sig.fdr = sig.fdr, sig.mat = sig.mat,
posthoc.res = my.res$posthoc.res)
mSetObj$analSet$aov <- aov
return(mSetObj)
}
# Perform ANOVA
mSet <- ANOVA.Anal(mSet, F, 0.05, "fisher")
.get.ftest.res <- function (data, cls, nonpar) {
print("Performing regular ANOVA F-tests ....")
aov.res <- my.res <- posthoc.res <- NULL
if (!nonpar) {
aov.res <- apply(data, 2, aof, cls)
anova.res <- lapply(aov.res, anova)
my.res <- unlist(lapply(anova.res, function(x) {
c(x["F value"][1, ], x["Pr(>F)"][1, ])
}))
posthoc.res <- sapply(names(aov.res), simplify = F, \(x){
TukeyHSD(aov.res[[x]])
})
}
else {
require(dunn.test)
anova.res <- apply(data, 2, kwtest, cls)
my.res <- unlist(lapply(anova.res, function(x) {
c(x$statistic, x$p.value)
}))
posthoc.res <- sapply(names(data), simplify = F, \(x) {
dunn.test(data[[x]], g = cls)
})
}
my.res <- list(aov.res = aov.res,
f.res = data.frame(matrix(my.res,
nrow = ncol(data), byrow = T),
stringsAsFactors = FALSE),
posthoc.res)
return(my.res)
}
mem.aov <<- memoise(get.ftest.res);
# Adapting MetaboAnalystR functions
library(ggplot2)
library(scales)
mSetObj$imgSet$fc <- list()
PlotFC_multiple <-
function (mSetObj = NA, ContrastName, fc.thresh,
imgName, format = "png", dpi = 72, width = NA)
{
imgName = paste(imgName, "dpi", dpi, ".", format, sep = "")
if (is.na(width)) {
w <- 8
} else if (width == 0) {
w <- 7
} else {
w <- width
}
h <- w * 6/8
mSetObj$imgSet$fc[[ContrastName]] <- imgName
fc = mSetObj$analSet$fc[[ContrastName]]
fc_data <- data.frame(x = 1:length(fc$fc.log), y = fc$fc.log,
Significance = ifelse(fc$inx.imp, "Significant", "Unsignificant"),
label = names(fc$inx.imp))
topVal <- max(abs(fc$fc.log))
ylim <- c(-topVal, topVal)
fc_data$ColorValue <- ifelse(fc_data$Significance == "Significant",
fc_data$y, NA)
fc_data$ColorValue <- as.numeric(fc_data$ColorValue)
sig_fc_range <- range(fc_data$ColorValue, na.rm = TRUE)
fc_data$tooltip <- paste0("Label: ", fc_data$label, "\nLog2FC: ",
round(fc_data$y, 2))
nUp = filter(fc_data, fc.log > fc.thresh & Significance == "Significant") %>% nrow
nDown = filter(fc_data, fc.log < -fc.thresh & Significance == "Significant") %>% nrow
p <- ggplot(fc_data, aes(x = x, y = y, label = label, text = tooltip)) +
geom_point(aes(size = abs(y), color = ColorValue, fill = ColorValue),
shape = 21, stroke = 0.5) +
scale_color_gradient2(low = "blue",
mid = "grey", high = "red", midpoint = 0, limits = sig_fc_range,
space = "Lab", na.value = "darkgrey", guide = "colourbar",
name = "Log2FC") +
scale_fill_gradient2(low = "blue",
mid = "grey", high = "red", midpoint = 0, limits = sig_fc_range,
space = "Lab", na.value = "darkgrey", name = "Log2FC") +
scale_size(range = c(1.5, 4), guide = "none") +
labs(x = "Identifier",
y = "Log2 Fold Change",
caption = paste0("Metabolites deregulated in ",
gsub("_v_", " vs ", ContrastName),
": Up=", nUp, "; Down=", nDown)) +
theme_bw() + theme(legend.position = "right") +
geom_hline(yintercept = 0, linewidth = 1)
Cairo::Cairo(file = imgName, unit = "in", dpi = dpi,
width = w, height = h, type = format, bg = "white")
print(p)
dev.off()
return(mSetObj)
}
# ANOVA
aof <- function (x, cls) {
aov(x ~ cls)
}
get.ftest.res <- function (data, cls, nonpar) {
print("Performing regular ANOVA F-tests ....")
aov.res <- my.res <- posthoc.res <- NULL
if (!nonpar) {
aov.res <- apply(data, 2, aof, cls)
anova.res <- lapply(aov.res, anova)
my.res <- unlist(lapply(anova.res, function(x) {
c(x["F value"][1, ], x["Pr(>F)"][1, ])
}))
posthoc.res <- sapply(names(aov.res), simplify = F, \(x){
TukeyHSD(aov.res[[x]])
})
}
else {
require(dunn.test)
anova.res <- apply(data, 2, kwtest, cls)
my.res <- unlist(lapply(anova.res, function(x) {
c(x$statistic, x$p.value)
}))
posthoc.res <- sapply(names(data), simplify = F, \(x) {
dunn.test(data[[x]], g = cls)
})
}
my.res <- list(aov.res = aov.res,
f.res = data.frame(matrix(my.res,
nrow = ncol(data), byrow = T),
stringsAsFactors = FALSE),
posthoc.res)
return(my.res)
}
GetFtestRes <- function(mSetObj=NA, nonpar=F){
if(!exists("mem.aov")){
require("memoise");
mem.aov <<- memoise(get.ftest.res);
}
mSetObj <- .get.mSet(mSetObj);
data <- as.matrix(mSetObj$dataSet$norm);
cls <- mSetObj$dataSet$cls;
print("using cache .......");
return(mem.aov(data, cls, nonpar));
}
ANOVA.Anal <- function (mSetObj = NA, nonpar = FALSE, thresh = 0.05, all_results = FALSE)
{
if (!nonpar) {
aov.nm <- "One-way ANOVA"
}
else {
aov.nm <- "Kruskal Wallis Test"
}
sig.num <- 0
aov.res <- sig.mat <- NULL
data <- as.matrix(mSetObj$dataSet$norm)
cls <- mSetObj$dataSet$cls
my.res <- GetFtestRes(mSetObj, nonpar)
aov.res <- my.res$aov.res
res <- my.res$f.res
fstat <- res[, 1]
p.value <- res[, 2]
names(fstat) <- names(p.value) <- colnames(data)
fdr.p <- p.adjust(p.value, "fdr")
all.mat <- data.frame(signif(fstat, 5), signif(p.value,
5), signif(-log10(p.value), 5), signif(fdr.p, 5))
rownames(all.mat) <- names(p.value)
colnames(all.mat) <- c("F.stat", "p.value", "-log10(p)",
"FDR")
ord.inx <- order(p.value)
ord.mat <- all.mat[ord.inx, ]
fast.write.csv(ord.mat, "anova_all_results.csv")
inx.imp <- fdr.p <= thresh
sig.num <- sum(inx.imp, na.rm = TRUE)
AddMsg(paste(c("A total of", sig.num, "significant features were found."),
collapse = " "))
res <- 0
sig.f <- sig.p <- sig.fdr <- 1
if (sig.num > 0) {
res <- 1
sig.f <- fstat[inx.imp]
sig.p <- p.value[inx.imp]
sig.fdr <- fdr.p[inx.imp]
if (exists("aov.res")) {
qs::qsave(aov.res[inx.imp], file = "aov_res_imp.qs")
}
sig.mat <- all.mat[inx.imp, ]
ord.inx <- order(sig.mat$p.value)
sig.mat <- sig.mat[ord.inx, ]
}
else {
sig.mat <- ord.mat[1:10, ]
}
aov <- list(aov.nm = aov.nm, nonpar = nonpar, sig.num = sig.num,
raw.thresh = thresh, thresh = -log10(thresh), p.value = p.value,
p.log = -log10(p.value), fdr.p = fdr.p, inx.imp = inx.imp,
sig.f = sig.f, sig.p = sig.p, sig.fdr = sig.fdr, sig.mat = sig.mat,
posthoc.res = my.res$posthoc.res)
mSetObj$analSet$aov <- aov
return(mSetObj)
}
# Perform ANOVA
mSet <- ANOVA.Anal(mSet, F, 0.05, "fisher")
# Perform ANOVA
mSet <- ANOVA.Anal(mSet, F, 0.05, "fisher")
# Plot fold-change analysis
source("scripts/metaboanalyst_adapted_functions.R")
# Perform ANOVA
mSet <- ANOVA.Anal(mSet, F, 0.05, "fisher")
# Plot fold-change analysis
source("scripts/metaboanalyst_adapted_functions.R")
# Perform ANOVA
mSet <- ANOVA.Anal(mSet, F, 0.05, "fisher")
# Plot fold-change analysis
source("scripts/metaboanalyst_adapted_functions.R")
# Perform ANOVA
mSet <- ANOVA.Anal(mSet, F, 0.05, "fisher")
# Perform ANOVA
mSet <- ANOVA.Anal(mSet, F, 0.05, "fisher")
# Plot fold-change analysis
source("scripts/metaboanalyst_adapted_functions.R")
# Perform ANOVA
mSet <- ANOVA.Anal(mSet, F, 0.05, "fisher")
View(mSet)
# Plot fold-change analysis
source("scripts/metaboanalyst_adapted_functions.R")
# Perform ANOVA
mSet <- ANOVA.Anal(mSet, F, 0.05, "fisher")
mSet$analSet$aov$aov.res
a = sapply(names(mSet$analSet$aov$aov.res), simplify = F, \(x) {TukeyHSD(mSet$analSet$aov$aov.res[[x]])})
a$`0.551/79.95733`
mSet$analSet$aov$aov.nm
mSet$dataSet$cls
mSet$analSet$aov$posthoc.res <-
sapply(names(mSet$analSet$aov$aov.res), simplify = F, \(x) {
dunn.test(mSet$dataSet$norm[[x]],
g = mSet$dataSet$cls)
})
mSet$analSet$aov$posthoc.res$`0.551/79.95733`
mSet$analSet$aov$posthoc.res <-
sapply(names(mSet$analSet$aov$aov.res), simplify = F, \(x) {
TukeyHSD(mSet$analSet$aov$aov.res[[x]])
})
mSet$analSet$aov$posthoc.res
mSet$analSet$aov$posthoc.res <-
sapply(names(mSet$analSet$aov$aov.res), simplify = F, \(x) {
TukeyHSD(mSet$analSet$aov$aov.res[[x]])$cls %>%
as.data.frame()
})
mSet$analSet$aov$posthoc.res$`0.551/79.95733`
mSet$dataSet$norm[[1]]
levene.test(mSet$dataSet$norm[[1]] ~ mSet$dataSet$cls)
leveneTest(mSet$dataSet$norm[[1]] ~ mSet$dataSet$cls)
leveneTest(mSet$dataSet$norm[[1]] ~ mSet$dataSet$cls) %>% str
leveneTest(mSet$dataSet$norm[[1]] ~ mSet$dataSet$cls)$`Pr(>F)`
cls = cls[cls != "QC"]
leveneTest(mSet$dataSet$norm[[1]][mSet$dataSet$cls != "QC"] ~ cls)$`Pr(>F)`
leveneTest(mSet$dataSet$norm[[1]][mSet$dataSet$cls != "QC"] ~ cls)$`Pr(>F)`[1]
kruskal.test(mSet$dataSet$norm[[1]][mSet$dataSet$cls != "QC"] ~ cls)
kruskal.test(mSet$dataSet$norm[[1]][mSet$dataSet$cls != "QC"] ~ cls) %>% str
aov(mSet$dataSet$norm[[1]][mSet$dataSet$cls != "QC"] ~ cls) %>% str
aov(mSet$dataSet$norm[[1]][mSet$dataSet$cls != "QC"] ~ cls)
aov(mSet$dataSet$norm[[1]][mSet$dataSet$cls != "QC"] ~ cls)$statistics
kruskal.test(mSet$dataSet$norm[[1]][mSet$dataSet$cls != "QC"] ~ cls) %>% str
# Perform ANOVA
mSet <- MetaboAnalystR::ANOVA.Anal(mSet, F, 0.05,"tukey")
mSet$analSet$aov
mSet$analSet$aov[[1]]
mSet$analSet$aov$inx.imp
mSet$analSet$aov$inx.imp[1]
mSet$analSet$aov$sig.mat
mSet$analSet$aov$sig.mat %>% head
MetaboAnalystR::Calculate.ANOVA.posthoc(mSet)
# Plot fold-change analysis
source("scripts/metaboanalyst_adapted_functions.R")
Calculate.ANOVA.posthoc(mSet)
# Plot fold-change analysis
source("scripts/metaboanalyst_adapted_functions.R")
# Perform ANOVA
mSet <- MetaboAnalystR::ANOVA.Anal(mSet, F, 0.05,"tukey")
Calculate.ANOVA.posthoc(mSet)
# Plot fold-change analysis
source("scripts/metaboanalyst_adapted_functions.R")
# Perform ANOVA
mSet <- MetaboAnalystR::ANOVA.Anal(mSet, F, 0.05,"tukey")
Calculate.ANOVA.posthoc(mSet)
# Plot fold-change analysis
source("scripts/metaboanalyst_adapted_functions.R")
Calculate.ANOVA.posthoc(mSet)
options()
library(MetaboAnalystR)
# Perform ANOVA
mSet <- MetaboAnalystR::ANOVA.Anal(mSet, F, 0.05,"tukey")
Calculate.ANOVA.posthoc(mSet)
